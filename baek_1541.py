# Python

## baek 2116 주사위 쌓기 골드5

https://www.acmicpc.net/problem/2116



> python3 584ms



* 문제

  > 천수는 여러 종류의 주사위를 가지고 쌓기 놀이를 하고 있다. 주사위의 모양은 모두 크기가 같은 정육면체이며 각 면에는 1부터 6까지의 숫자가 하나씩 적혀있다. 그러나 보통 주사위처럼 마주 보는 면에 적혀진 숫자의 합이 반드시 7이 되는 것은 아니다.
  >
  > 주사위 쌓기 놀이는 아래에서부터 1번 주사위, 2번 주사위, 3번 주사위, … 의 순서로 쌓는 것이다. 쌓을 때 다음과 같은 규칙을 지켜야 한다: 서로 붙어 있는 두 개의 주사위에서 아래에 있는 주사위의 윗면에 적혀있는 숫자는 위에 있는 주사위의 아랫면에 적혀있는 숫자와 같아야 한다. 다시 말해서, 1번 주사위 윗면의 숫자는 2번 주사위 아랫면의 숫자와 같고, 2번 주사위 윗면의 숫자는 3번 주사위 아랫면의 숫자와 같아야 한다. 단, 1번 주사위는 마음대로 놓을 수 있다.
  >
  > 이렇게 쌓아 놓으면 긴 사각 기둥이 된다. 이 사각 기둥에는 4개의 긴 옆면이 있다. 이 4개의 옆면 중에서 어느 한 면의 숫자의 합이 최대가 되도록 주사위를 쌓고자 한다. 이렇게 하기 위하여 각 주사위를 위 아래를 고정한 채 옆으로 90도, 180도, 또는 270도 돌릴 수 있다. 한 옆면의 숫자의 합의 최댓값을 구하는 프로그램을 작성하시오.
  
* 입력

  > 첫줄에는 주사위의 개수가 입력된다. 그 다음 줄부터는 한 줄에 하나씩 주사위의 종류가 1번 주사위부터 주사위 번호 순서대로 입력된다. 주사위의 종류는 각 면에 적혀진 숫자가 그림1에 있는 주사위의 전개도에서 A, B, C, D, E, F 의 순서로 입력된다. 입력되는 숫자 사이에는 빈 칸이 하나씩 있다. 주사위의 개수는 10,000개 이하이며 종류가 같은 주사위도 있을 수 있다.
  >
  > ```bash
  > 5
  > 2 3 1 6 5 4
  > 3 1 2 4 6 5
  > 5 6 4 1 3 2
  > 1 3 6 2 4 5
  > 4 1 6 5 2 3
  > ```

* 출력

  > 첫줄에 한 옆면의 숫자의 합이 가장 큰 값을 출력한다.
  >
  > ```bash
  > 29
  > ```



```python
# 
# # 로직 설명
# 5 # n
# 2 3 1 6 5 4
# 3 1 2 4 6 5
# 5 6 4 1 3 2
# 1 3 6 2 4 5
# 4 1 6 5 2 3
# 위와 같이 a b c d e f 순으로 입력이 됩니다. 주사위를 보면 a-f, b-d, c-e가 한쌍이므로
# 리스트에 정리를 해주었습니다.
# [[2, 4], [3, 6], [1, 5]]
# [[3, 5], [1, 4], [2, 6]]
# [[5, 2], [6, 1], [4, 3]]
# [[1, 5], [3, 2], [6, 4]]
# [[4, 3], [1, 5], [6, 2]]
# 이처럼 정렬을 하고 각각의 주사위의 위, 아래 수에 맞게 스택에 넣어 주었습니다.
# 예를 들어 2 4, 4 1, 1 6, 6 4, 4 3 이렇게 넣어 줍니다.
# 위 아래를 넣어 주었으면 4방면의 최대값을 계산해 줘야 합니다.
# 임시 값을 n * 6으로 두어 최대값으로 설정해 두고, 위 아래 값 중에 6이 있다면,
# 1씩 감소해 줬습니다. 만약 6과 5가 한 쌍으로 위 아래에 있다면, 2를 감소해 주었습니다.
# 그리고 반복문이 돌기 전에 result값과 임시값을 비교해 주어 result값을 갱신해 주었습니다.
# 
# 중간에 6이 스택에 들어올 경우 임시값에서 빼고, 그 임시값이 현재 result값보다
# 더 작아지면 그 반복문을 continue할 수 있지만,, 귀찮아서 그렇게 안했습니다..
# 
# 맨 아래에는 제가 직접 만든 반례 추가해 두겠슴다.

n = int(input())
arr = [[] * 1 for _ in range(n)]
for i in range(n):
    a, b, c, d, e, f = map(int, input().split())
    arr[i].append([a, f])
    arr[i].append([b, d])
    arr[i].append([c, e])

result = 0

for i in range(3):
    idx = 0
    for _ in range(2):
        stack, tmp = [], 6 * n
        stack.append(arr[0][i][idx])
        stack.append(arr[0][i][idx-1])
        for j in range(1, n):
            for k in range(3):
                if stack[-1] in arr[j][k]:
                    iidx = arr[j][k].index(stack[-1])
                    stack.append(arr[j][k][iidx])
                    stack.append(arr[j][k][iidx-1])
        for j in range(0, len(stack), 2):
            if stack[j] == 6:
                if stack[j+1] == 5:
                    tmp -= 2
                else:
                    tmp -= 1
            elif stack[j+1] == 6:
                if stack[j] == 5:
                    tmp -= 2
                else:
                    tmp -= 1
            else:
                continue
        if result < tmp:
            result = tmp
        if result == n * 6:
            print(result)
            exit()
        idx += 1

print(result)

'''
[[2, 4], [3, 6], [1, 5]]
[[3, 5], [1, 4], [2, 6]]
[[5, 2], [6, 1], [4, 3]]
[[1, 5], [3, 2], [6, 4]]
[[4, 3], [1, 5], [6, 2]]

2 4  4 1  1 6  6 4  4 3 -> 28
4 2  2 6  6 1  1 5  5 1 -> 28
3 6  6 2  2 5  5 1  1 5 -> 28
6 3  3 5  5 2  2 3  3 4 -> 29
1 5  5 3  3 4  4 6  6 2 -> 28
5 1  1 4  4 3  3 2  2 6 -> 29

7
2 6 5 1 4 3
1 5 6 2 3 4
5 1 3 2 6 4
5 2 1 6 4 3
6 4 3 1 5 2
3 2 4 5 6 1
1 6 4 3 2 5
41

'''
```

> 아,, 피곤하다..
>
> 반례가 없어서 내가 직접 random함수로 짰다 ㅋㅋㅋㅋ  근데 진짜 못풀 것 같은 문제도 계속 풀려고 노력하면 답이 나온다. 신기하다



* 모범답안

  ```python
  536
  
  num_dice = int(input())
  dice = []
  for _ in range(num_dice):
      dice.append(list(map(int, input().split())))
  
  route = {0 : 5, 1 : 3, 2 : 4, 3 : 1, 4 : 2, 5 : 0}
  max_num = 0
  
  for i in range(6):
      result = []
      tmp = [1,2,3,4,5,6]
      tmp.remove(dice[0][i])
      next = dice[0][route[i]]
      tmp.remove(next)
      result.append(max(tmp))
      for j in range(1, num_dice):
          tmp = [1,2,3,4,5,6]
          tmp.remove(next)
          next = dice[j][route[dice[j].index(next)]]
          tmp.remove(next)
          result.append(max(tmp))
      result = sum(result)
      if max_num < result:
          max_num = result
  
  print(max_num)
  ```
  
  > 미쳤다. 딕셔너리를 통해서 쌍을 함께 계산해 줬다. 위 아래를 remove함수로 제거하고 남은 것들 중에서 최대값으로 저장하여 그 저장된 리스트를 나중에 한꺼번에 계산하도록 했다..
  >
  > 어떻게 이런 생각을 하지? 짱멋지다..

